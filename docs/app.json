[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load penguins dataset\npenguins_df = load_penguins()\n\n# Set up the UI page options\nui.page_opts(title=\"Kristen's Penguins Data\", fillable=True)\n\n# Create the sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\", style=\"font-size: 16px;\")  # Adjusted size for header\n    \n    # Dropdown to select attribute\n    ui.tags.div(\n        ui.input_selectize(\n            \"selected_attribute\",\n            \"Select Attribute\",\n            [\"bill_length_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        ),\n        style=\"font-size: 12px;\"  # Smaller text for dropdown\n    )\n    \n    # Numeric input for Plotly histogram bins\n    ui.tags.div(\n        ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 30),\n        style=\"font-size: 12px;\"\n    )\n    \n    # Slider for Seaborn histogram bins\n    ui.tags.div(\n        ui.input_slider(\n            \"seaborn_bin_count\",\n            \"Seaborn Bin Count\",\n            1,\n            100,\n            30,\n        ),\n        style=\"font-size: 12px;\"\n    )\n    \n    # Checkbox group for selecting species\n    ui.tags.div(\n        ui.input_checkbox_group(\n            \"selected_species_list\",\n            \"Select Species\",\n            [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n            selected=[\"Adelie\"],\n            inline=True,\n        ),\n        style=\"font-size: 12px;\"\n    )\n    \n    # Horizontal rule\n    ui.hr()\n    \n    # Link to GitHub repo\n    ui.tags.div(\n        ui.a(\n            \"GitHub Code Repository- KF\",\n            href=\"https://github.com/AnalysisKris/cintel-03-reactive-kristenfinley\",\n            target=\"_blank\",\n        ),\n        style=\"font-size: 12px;\"  # Smaller text for link\n    )\n\n# Layout columns for organizing content\nwith ui.layout_columns():\n    # Data Table card\n    with ui.card():\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        async def penguin_datatable():\n            return await filtered_data()  # Use filtered data\n\n    # Data Grid card\n    with ui.card():\n        ui.card_header(\"Data Grid\")\n\n        @render.data_frame\n        async def penguin_datagrid():\n            return await filtered_data()  # Use filtered data\n\n# Add a reactive calculation to filter the data\n@reactive.calc\nasync def filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n\n# Layout columns for visualizations\nwith ui.layout_columns():\n    # Tabbed tabset card for plots\n    with ui.navset_card_tab(id=\"plot_tabs\"):\n        # Plotly Histogram tab\n        with ui.nav_panel(\"Plotly Histogram\"):\n\n            @render_plotly\n            async def plotly_histogram():\n                try:\n                    data = await filtered_data()  # Get the current data\n                    if data.empty:\n                        return None  # If no data, do not attempt to render the plot\n                    plotly_hist = px.histogram(\n                        data_frame=data,\n                        x=input.selected_attribute(),\n                        nbins=input.plotly_bin_count(),\n                        color=\"species\",\n                        color_discrete_sequence=[\"#5e4b8a\", \"#a55e8b\", \"#d59b84\"],\n                    ).update_layout(\n                        title=\"Plotly Penguins Data by Attribute\",\n                        xaxis_title=\"Selected Attribute\",\n                        yaxis_title=\"Count\",\n                        plot_bgcolor='#ffebee',\n                        paper_bgcolor='#ffebee',\n                    )\n                    return plotly_hist\n                except Exception as e:\n                    print(\"Error generating Plotly histogram:\", e)\n                    return None  # Optionally return a placeholder or None if an error occurs\n\n        # Seaborn Histogram tab\n        with ui.nav_panel(\"Seaborn Histogram\"):\n\n            @render.plot\n            async def seaborn_histogram():\n                try:\n                    data = await filtered_data()\n                    if data.empty:\n                        return None\n                    plt.figure(facecolor='#ffebee')\n                    seaborn_hist = sns.histplot(\n                        data=data,\n                        x=input.selected_attribute(),\n                        bins=input.seaborn_bin_count(),\n                        color=\"#5e4b8a\",\n                    )\n                    seaborn_hist.set_title(\"Seaborn Penguin Data by Attribute\")\n                    seaborn_hist.set_xlabel(\"Selected Attribute\")\n                    seaborn_hist.set_ylabel(\"Count\")\n                    plt.gca().set_facecolor('#ffebee')\n                    plt.tight_layout()\n                    return seaborn_hist\n                except Exception as e:\n                    print(\"Error generating Seaborn histogram:\", e)\n                    return None\n\n        # Plotly Scatterplot tab\n        with ui.nav_panel(\"Plotly Scatterplot\"):\n\n            @render_plotly\n            async def plotly_scatterplot():\n                try:\n                    data = await filtered_data()\n                    if data.empty:\n                        return None\n                    plotly_scatter = px.scatter(\n                        data_frame=data,\n                        x=\"bill_length_mm\",\n                        y=\"bill_depth_mm\",\n                        color=\"species\",\n                        size_max=8,\n                        title=\"Plotly Scatterplot: Bill Depth and Length\",\n                        labels={\n                            \"bill_depth_mm\": \"Bill Depth (mm)\",\n                            \"bill_length_mm\": \"Bill Length (mm)\",\n                        },\n                        color_discrete_sequence=[\"#5e4b8a\", \"#a55e8b\", \"#d59b84\"],\n                    ).update_layout(\n                        plot_bgcolor='#ffebee',\n                        paper_bgcolor='#ffebee',\n                    )\n                    return plotly_scatter\n                except Exception as e:\n                    print(\"Error generating Plotly scatterplot:\", e)\n                    return None\n\n        # Grouped Bar Plot tab\n        with ui.nav_panel(\"Grouped Bar Plot\"):\n\n            @render_plotly\n            async def grouped_bar_plot():\n                try:\n                    data = await filtered_data()\n                    if data.empty:\n                        return None\n                    grouped_bar = px.bar(\n                        data_frame=data,\n                        x=\"island\",\n                        y=\"bill_length_mm\",\n                        color=\"species\",\n                        barmode=\"group\",\n                        tit4le=\"Average Bill Length by Island\",\n                        labels={\"bill_length_mm\": \"Average Bill Length (mm)\"},\n                        color_discrete_sequence=[\"#5e4b8a\", \"#a55e8b\", \"#d59b84\"],\n                    ).update_layout(\n                        plot_bgcolor='#ffebee',\n                        paper_bgcolor='#ffebee',\n                    )\n                    return grouped_bar\n                except Exception as e:\n                    print(\"Error generating grouped bar plot:\", e)\n                    return None\n", "type": "text"}]